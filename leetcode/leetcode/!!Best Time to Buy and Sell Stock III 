/*
 * 1.只能用O(n)的方法
 * 每次记录之前的最低点,end[i]=Math.max(end[i-1], a[i]-low);
 * 再记录之后的最高点begin[i]=Math.max(begin[i+1],high-a[i]);
 * 这样就可以算 end[i]+begin[i+1]的max了,问题是第一个点作begin的时候忽略掉了.
 * 必须ans=begin[0]初始
 */
public class Solution {
	int begin[];
	int end[];
    public int maxProfit(int[] a) {
        int i,len=a.length,ans=0;
        
        if(len<2)
        	return 0;
        int begin[]=new int[len];
        int end[]=new int[len];
        int low,high;
        
        high=a[len-1];
        for(i=len-2;i>=0;i--)
        {
        	high=Math.max(high, a[i]);
        	begin[i]=Math.max(begin[i+1],high-a[i]);
        }
        
        low=a[0];
        for(i=1;i<len;i++)
        {
        	low=Math.min(low,a[i]);
        	end[i]=Math.max(end[i-1], a[i]-low);
        }
     /*
     for(i=0;i<len;i++)
        {
        	System.out.println(begin[i]+" "+end[i]);
        }*/
        ans=begin[0];
        for(i=0;i<len-1;i++)
        {
        	ans=Math.max(ans, end[i]+begin[i+1]);
       	}
        return ans;
    }
}