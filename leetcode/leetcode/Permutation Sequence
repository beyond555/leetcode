/*
使用递归模拟
*/
public class Solution {
	public int a[]=new int[10];
	public boolean vis[]=new boolean[10];
	public void init()
	{
		int i;
		a[0]=0;
		a[1]=1;
		for(i=2;i<10;i++)
			a[i]=i*a[i-1];
		for(i=0;i<10;i++)
			vis[i]=false;
	}
	public StringBuffer get(int n,int k)
	{
	//	System.out.println(n+" "+k);
		StringBuffer sb=new StringBuffer("");
		if(n==1)
		{
			sb.append(n);
			return sb;
		}
		int t=(k-1)/a[n-1]+1;
		int k1=(k-1)%a[n-1]+1;
		sb.append(t);
		sb.append(get(n-1,k1));
		return sb;
	}
	public StringBuffer resume(StringBuffer s)
	{
		int i,len=s.length();
		char c;
		for(i=0;i<len;i++)
		{
			c=s.charAt(i);
			s.setCharAt(i,now(c));
		}
		return s;
	}
	public char now(char c)
	{
		int i,cnt=c-'0';
		for(i=1;i<10;i++)
		{
			if(!vis[i])
				cnt--;
			if(cnt==0)
			{
				vis[i]=true;
				return (char) (i-0+'0');
			}
		}
		return '-';
	}
    public String getPermutation(int n, int k) {
        init();
        StringBuffer s=get(n,k);
 //       System.out.println(s);
 //       System.out.println(resume(s));
        return resume(s).toString();
    }
}
