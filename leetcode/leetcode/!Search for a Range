/*
When judge A[r] or A[l], confirm the l&&r are in [0,A.length] or index out of boundary
take care of the binary search
*/
public class Solution {
    public int first(int []A,int target)
    {
        int l=0,r=A.length-1,m;
        while(l<r)
        {
            m=(l+r)/2;
            if(A[m]<target)
                l=m+1;
            else if(A[m]>target)
                r=m-1;
            else
                r=m;
        }
        if(r>=0&&r<A.length&&A[r]==target)
            return r;
        return -1;
    }
    public int last(int []A,int target)
    {
        int l=0,r=A.length-1,m;
        while(l<r)
        {
            m=(l+r+1)/2;//ceil
            if(A[m]<target)
                l=m+1;
            else if(A[m]>target)
                r=m-1;
            else
                l=m;
        }
        if(l>=0&&l<A.length&&A[l]==target)
            return l;
        return -1;
    }
    public int[] searchRange(int[] A, int target) {
        int ans[]=new int[2];
        ans[0]=first(A,target);
        ans[1]=last(A,target);
        return ans;
    }
}
