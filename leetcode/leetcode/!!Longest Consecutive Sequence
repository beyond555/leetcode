/*
1.每次记录已经连接的线段的l,r值，并且对于新加入的点A，如果连接了左边[al,ar],和a右边[bl,br],(ar+1=A=bl-1)则更新　新线段为[al,br]
2.如果用while去一个个处理左边，右边会tle
3.对于重复的点的n判断,因为ans,left和right都不记录t了，所以要一个新的Set来记录
4.Map.put是覆盖的操作
5.Map的遍历操作
*/
import java.util.*;
public class Solution {
    public int longestConsecutive(int[] a) {
        Map<Integer,Integer>ans=new HashMap<Integer,Integer>();
        Map<Integer,Integer>left=new HashMap<Integer,Integer>();
        Map<Integer,Integer>right=new HashMap<Integer,Integer>();
        Set<Integer>vis=new HashSet<Integer>();
        int i,len=a.length,t,cnt;
        int l,r;
        int sum=0;
        for(i=0;i<len;i++)
        {
        	t=a[i];
//        	if(ans.containsKey(t))
//        		continue;
        	if(vis.contains(t))
        		continue;
        	vis.add(t);
        	left.put(t, t);
        	right.put(t, t);
        	cnt=1;
        	l=r=t;
        	if(ans.containsKey(t-1))
        	{
        		cnt+=ans.get(t-1);
        		l=left.get(t-1);
        	}
        	if(ans.containsKey(t+1))
        	{
        		cnt+=ans.get(t+1);
        		r=right.get(t+1);
        	}
        	ans.put(l, cnt);
        	ans.put(r, cnt);
        	left.put(r, l);
        	right.put(l, r);
       // 	System.out.println(t+" "+l+" "+r+" "+cnt);
        }
        for(Integer key:ans.keySet())
        {
        	sum=Math.max(sum, ans.get(key));
        }
        return sum;
    }
}
